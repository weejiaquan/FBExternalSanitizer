{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Local YouTube Downloader","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["googlevideo.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://*.youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1579671942971,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/369400-local-youtube-downloader/code/Local%20YouTube%20Downloader.user.js","uuid":"6e3eaf92-9084-44f3-8c2e-f4c62e7e834e","source":"","requires":[{"meta":{"name":"vue.js","url":"https://unpkg.com/vue@2.6.10/dist/vue.js","ts":1582701382361,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"xfetch.min.js","url":"https://unpkg.com/xfetch-js@0.3.4/xfetch.min.js","ts":1582701382243,"mimetype":"text/javascript"},"source":"KChhLGIpPT57ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sYik6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWIoKTphLnhmPWIoKX0pKHRoaXMsKCk9Pntjb25zdCBhPVsiZ2V0IiwicG9zdCIsInB1dCIsInBhdGNoIiwiZGVsZXRlIiwiaGVhZCJdO2NsYXNzIGIgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihhKXtzdXBlcihhLnN0YXR1c1RleHQpLHRoaXMubmFtZT0iSFRUUEVycm9yIix0aGlzLnJlc3BvbnNlPWF9fWNsYXNzIGMgZXh0ZW5kcyBQcm9taXNle31mb3IoY29uc3QgYSBvZlsiYXJyYXlCdWZmZXIiLCJibG9iIiwiZm9ybURhdGEiLCJqc29uIiwidGV4dCJdKWMucHJvdG90eXBlW2FdPWZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRoZW4oYj0+YlthXSgpKS50aGVuKGJ8fChhPT5hKSl9O2NvbnN0e2Fzc2lnbjpkfT1PYmplY3QsZT1hPT5hLnJlZHVjZSgoYSxbYixjXSk9PihhW2JdPWMsYSkse30pLGY9KC4uLmEpPT5iPT5hLnNvbWUoYT0+InN0cmluZyI9PXR5cGVvZiBhP3R5cGVvZiBiPT1hOmIgaW5zdGFuY2VvZiBhKSxnPWYoInN0cmluZyIpLGg9Zigib2JqZWN0IiksaT1hPT5nKGEpfHxoKGEpLGo9YT0+e2lmKCFhLm9rKXRocm93IG5ldyBiKGEpO3JldHVybiBhfSxrPShoPXt9KT0+e2NvbnN0IGw9KGEsYj17fSk9PntkKGIsaCk7Y29uc3Qgaz1hPT5uZXcgYi5VUkxTZWFyY2hQYXJhbXMoYSkudG9TdHJpbmcoKSxsPW5ldyBiLlVSTChhLGIuYmFzZVVSSXx8dm9pZCAwKTtpZihiLmhlYWRlcnM/ZihiLkhlYWRlcnMpKGIuaGVhZGVycykmJihiLmhlYWRlcnM9ZShbLi4uYi5oZWFkZXJzLmVudHJpZXMoKV0pKTpiLmhlYWRlcnM9e30sYi5qc29uKWIuYm9keT1KU09OLnN0cmluZ2lmeShiLmpzb24pLGIuaGVhZGVyc1siQ29udGVudC1UeXBlIl09ImFwcGxpY2F0aW9uL2pzb24iO2Vsc2UgaWYoaShiLnVybGVuY29kZWQpKWIuYm9keT1nKGIudXJsZW5jb2RlZCk/Yi51cmxlbmNvZGVkOmsoYi51cmxlbmNvZGVkKSxiLmhlYWRlcnNbIkNvbnRlbnQtVHlwZSJdPSJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiO2Vsc2UgaWYoZihiLkZvcm1EYXRhLCJvYmplY3QiKShiLmZvcm1EYXRhKSl7aWYoIWYoYi5Gb3JtRGF0YSkoYi5mb3JtRGF0YSkpe2NvbnN0IGE9bmV3IGIuRm9ybURhdGE7Zm9yKGNvbnN0W2MsZF1vZiBPYmplY3QuZW50cmllcyhiLmZvcm1EYXRhKSlhLmFwcGVuZChjLGQpO2IuZm9ybURhdGE9YX1iLmJvZHk9Yi5mb3JtRGF0YX1yZXR1cm4gYi5xcyYmKGcoYi5xcykmJihiLnFzPShhPT5lKFsuLi5uZXcgYi5VUkxTZWFyY2hQYXJhbXMoYSkuZW50cmllcygpXSkpKGIucXMpKSxsLnNlYXJjaD1rKGQoZShbLi4ubC5zZWFyY2hQYXJhbXMuZW50cmllcygpXSksYi5xcykpKSxiLmNyZWRlbnRpYWxzfHwoYi5jcmVkZW50aWFscz0ic2FtZS1vcmlnaW4iKSxjLnJlc29sdmUoYi5mZXRjaChsLGIpLnRoZW4oaikpfTtmb3IoY29uc3QgYiBvZiBhKWxbYl09KGEsYz17fSk9PihjLm1ldGhvZD1iLnRvVXBwZXJDYXNlKCksbChhLGMpKTtyZXR1cm4gbC5leHRlbmQ9YT0+ayhkKHt9LGgsYSkpLGwuSFRUUEVycm9yPWIsbH0sbD0idW5kZWZpbmVkIiE9dHlwZW9mIGRvY3VtZW50LG09InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmO3JldHVybiBtP2soe2ZldGNoOmZldGNoLmJpbmQoc2VsZiksVVJMLFJlc3BvbnNlLFVSTFNlYXJjaFBhcmFtcyxIZWFkZXJzLEZvcm1EYXRhLGJhc2VVUkk6bD9kb2N1bWVudC5iYXNlVVJJOiIifSk6aygpfSk7"},{"meta":{"name":"ffmpeg.min.js","url":"https://unpkg.com/@ffmpeg/ffmpeg@0.5.2/dist/ffmpeg.min.js","ts":1582701382302,"mimetype":"text/javascript"},"source":""}]},{"name":"FBSanitizer","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1582950305903,"data":{}},"enabled":true,"position":2,"uuid":"678a46de-d523-41d9-a9d5-a734b9ee6321","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBGQlNhbml0aXplcgovLyBAbmFtZXNwYWNlICAgIGFyaXN1Lm1sCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgUmVtb3ZlIHRoYXQgc3R1cGlkIGZiY2xpZCBzbyB1IGNhbiBzaGFyZSBsaW5rIHdpdCBoZnJpZW5kcwovLyBAYXV0aG9yICAgICAgIEx5Y2h3ZWUKLy8gQGluY2x1ZGUgICAgICAqCi8vIEBncmFudCAgICAgICAgbm9uZQovLyBAcnVuLWF0IGRvY3VtZW50LXN0YXJ0Ci8vID09L1VzZXJTY3JpcHQ9PQp3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigidXRtX3NvdXJjZT0iKSAhPSAtMSkgewogICAgICAgIHVybCA9IHVybC5zcGxpdCgidXRtX3NvdXJjZT0iKVswXS5zbGljZSgwLCAtMSk7CiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7CiAgICB9CiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigiZmJjbGlkPSIpICE9IC0xKSB7CiAgICAgICAgdXJsID0gdXJsLnNwbGl0KCJmYmNsaWQ9IilbMF0uc2xpY2UoMCwgLTEpOwogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsOwogICAgfQp9"}]}